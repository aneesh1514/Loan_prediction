# -*- coding: utf-8 -*-
"""Loan_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O8iiNrMuAQyhqbotB6kP3J7PdNghmURY
"""

import numpy as np
import pandas as pd

test_dataset=pd.read_csv('test_lAUu6dG.csv')
train_dataset=pd.read_csv('train_ctrUa4K.csv')

x_train=train_dataset.iloc[:,1:-1]
y_train=train_dataset.iloc[:,-1]
x_test=test_dataset.iloc[:,1:]
x_train=np.array(x_train)
x_test=np.array(x_test)
for i in range(x_train.shape[0]):
  if(x_train[i][2]=='3+'):
    x_train[i][2]='4'
for j in range(x_test.shape[0]):
  if(x_test[j][2]=='3+'):
    x_test[j][2]='4'

from sklearn.impute import SimpleImputer
si=SimpleImputer(missing_values=np.nan,strategy='mean')
si_cat=SimpleImputer(strategy='most_frequent')
si=si.fit(x_train[:,2:3])
x_train[:,2:3]=si.transform(x_train[:,2:3])
si=si.fit(x_test[:,2:3])
x_test[:,2:3]=si.transform(x_test[:,2:3])

si=si.fit(x_train[:,5:10])
x_train[:,5:10]=si.transform(x_train[:,5:10])
si=si.fit(x_test[:,5:10])
x_test[:,5:10]=si.transform(x_test[:,5:10])

si_cat=si_cat.fit(x_train[:,:2])
x_train[:,:2]=si_cat.transform(x_train[:,:2])
si_cat=si_cat.fit(x_train[:,3:5])
x_train[:,3:5]=si_cat.transform(x_train[:,3:5])
si_cat=si_cat.fit(x_train[:,-1:])
x_train[:,-1:]=si_cat.transform(x_train[:,-1:])

si_cat=si_cat.fit(x_test[:,:2])
x_test[:,:2]=si_cat.transform(x_test[:,:2])
si_cat=si_cat.fit(x_test[:,3:5])
x_test[:,3:5]=si_cat.transform(x_test[:,3:5])
si_cat=si_cat.fit(x_test[:,-1:])
x_test[:,-1:]=si_cat.transform(x_test[:,-1:])

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
y=le.fit_transform(y_train)
x_train[:,-1]=le.fit_transform(x_train[:,-1])
x_test[:,-1]=le.fit_transform(x_test[:,-1])
x_train[:,1]=le.fit_transform(x_train[:,1])
x_test[:,1]=le.fit_transform(x_test[:,1])
x_train[:,0]=le.fit_transform(x_train[:,0])
x_test[:,0]=le.fit_transform(x_test[:,0])
x_train[:,3]=le.fit_transform(x_train[:,3])
x_test[:,3]=le.fit_transform(x_test[:,3])
x_train[:,4]=le.fit_transform(x_train[:,4])
x_test[:,4]=le.fit_transform(x_test[:,4])

from sklearn.preprocessing import StandardScaler
sc_x=StandardScaler()
x_train=sc_x.fit_transform(x_train)
x_test=sc_x.transform(x_test)

print(x_test[:10,:])

print(x_train[:10,:])

print(y_train[:10])

from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors = 10, metric = 'minkowski')
classifier.fit(x_train, y)

y_pred=classifier.predict(x_test)

print(y_pred)

y=le.inverse_transform(y_pred)
for i in range(y.shape[0]):
  if(y[i]=="Yes"):
    y[i]='Y'
  elif(y[i]=="No"):
    y[i]='N'
print(y)

Id=test_dataset.iloc[:,0]

dict={'Loan_ID':Id,'Loan_Status':y}
df = pd.DataFrame(dict) 
df.to_csv('Final_Submission.csv',index=False)

